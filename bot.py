import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from loguru import logger
from config import TOKEN, AUDIO_FOLDER, LOG_FILE, ADMIN_ID
from utils.text_extraction import extract_text_from_url_static, extract_text_from_url_dynamic
from utils.text_to_speech import synthesize_text_to_audio_edge
from collections import deque

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±–∑–æ—Ä–∞
user_queries = []
os.makedirs(AUDIO_FOLDER, exist_ok=True)
logger.add(LOG_FILE, rotation="1 MB", retention="10 days", compression="zip")

@dp.message(Command(commands=["s", "S", "—ã", "–´"]))
async def cmd_s(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /s, /S, /—ã, /–´.
    –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ADMIN_ID.
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ bot_log.log.
    """
    # logger.info(f"Received command {message.text} from user {message.from_user.id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id != ADMIN_ID:
        logger.warning(f"Access denied for user {message.from_user.id}")
        await message.reply("Access denied.")
        return

    try:
        # logger.info(f"Reading log file from: {LOG_FILE}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        if not os.path.exists(LOG_FILE):
            logger.error(f"Log file {LOG_FILE} does not exist.")
            await message.reply("Log file does not exist.")
            return

        # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            last_n_lines = deque(f, 50)
        last_lines = ''.join(last_n_lines)

        # logger.info(f"Read {len(last_n_lines)} lines from log file.")

        if len(last_lines.strip()) == 0:
            # logger.info("No log messages found.")
            await message.reply("No log messages.")
        else:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(last_lines) > 4000:
                # –ï—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª
                log_file = FSInputFile(LOG_FILE)
                # logger.info("Sending log file as document due to length.")
                await message.reply_document(document=log_file, caption="Last log messages:")
            else:
                # logger.info("Sending log messages as text.")
                await message.reply(f"üìù Last 50 log messages:\n{last_lines}", parse_mode='HTML')

    except Exception as e:
        # logger.exception("Failed to read log file.")
        await message.reply(f"Failed to read log file: {e}")


@dp.message(F.text.regexp(r'^https?://'))
async def handle_url(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö URL.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –∞—É–¥–∏–æ.
    """
    url = message.text
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        text_page = await extract_text_from_url_static(url)
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—ã—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        if len(text_page) < 200:
            logger.info(f"Dynamic site detected, using Playwright: {url}")
            text_page = await extract_text_from_url_dynamic(url)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ
        mp3_file = await synthesize_text_to_audio_edge(text_page, str(message.from_user.id), message, logger)
        audio = FSInputFile(mp3_file)
        await message.reply_audio(audio=audio)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(mp3_file)
    except Exception as e:
        await message.reply(f"Failed to extract text from the URL: {e}")

@dp.message(F.text)
async def handle_text(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    text = message.text
    user_queries.append(f"User @{message.from_user.username}: {text[:100]}...")
    mp3_file = await synthesize_text_to_audio_edge(text, str(message.from_user.id), message, logger)
    audio = FSInputFile(mp3_file)
    await message.reply_audio(audio=audio)
    os.remove(mp3_file)

@dp.message(F.document)
async def handle_file(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    file = await bot.download(message.document)
    text = file.read().decode("utf-8")  # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    mp3_file = await synthesize_text_to_audio_edge(text, str(message.from_user.id), message, logger)
    audio = FSInputFile(mp3_file)
    await message.reply_audio(audio=audio)
    os.remove(mp3_file)
